#!/bin/bash

#A script which blacklists an IP or unblocks an IP
#Parameters:
#
#-i <string>
#-a <list|delist>
#-d <number>

basename=`basename $0`
NO_ARGS=0
DIR="/var/log/blacklist"
BLOCKED_LOG="$DIR/block.log"
UNBLOCKED_LOG="$DIR/unblocked.log"
PROBLEM_LOG="$DIR/problem.log"


source /usr/share/blacklist/lang/ru
log()
{

	if [ ! -d "$DIR" ]
	then
		mkdir $DIR
	fi
	case "$2" in
	"list") date=`date +"%d.%m.%Y %T.%N"`
		printf "$LOG_IP_BLOCKED" "$date" "$1" >> $BLOCKED_LOG
		;;

	"delist") date=`date +"%d.%m.%Y %T.%N"`
		printf "$LOG_IP_UNBLOCKED" "$date" "$1" >> $UNBLOCKED_LOG
		;;

	"block") date=`date +"%d.%m.%Y %T.%N"`
		printf "$LOG_MASS_BLOCKING" "$date" "$1" "$3" >> $BLOCKED_LOG
		;;

	"unblock") date=`date +"%d.%m.%Y %T.%N"`
		printf "$LOG_MASS_UNBLOCKING" "$date" "$1" "$3" >> $UNBLOCKED_LOG
		;;
	"problem") date=`date +"%d.%m.%Y %T.%N"`
		print "$LOG_MASS_PROBLEM" "$date" "$1" "$3" >> $PROBLEM_LOG
		;;

	*) usage
	    ;;
	esac
	
}


    
help()
{
    echo "This script helps to block IP addresses. You can work both with IPv4 and IPv6. These IPs you can block and unblock. When necessary, use the blocking feature from file"
    echo "Usage:"
    echo "";
    echo "-i | --ip-address IP address which is to be blocked or unblocked"
    echo "-a | --action action, which is to be taken (list, delist, block, unblock). List/delist is for single IPs whereas block/unblock is for file operations"
    echo "-f | --block-from-file full path to the file name which contains IPs to block"
    echo "-c | --count just count IPs that were already blocked"
    echo "-v | --version Echoes the version of this script"
    echo "-h | --help Prints this help message"
    exit 1
}
    
valid_ip_v4()
{
        local  ip=$1
        local  stat=1
        
            if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/{,1}[0-9]{,2}$ ]]; then
                OIFS=$IFS
                IFS='.'
                ip=($ip)
                IFS=$OIFS
                [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
                stat=$?
            fi
            return $stat
}


valid_ip_v6()
{
    file="$(mktemp /tmp/IPLogic.XXXXXX)"
    ipcalc -c "$1" 2>$file
    
    size=`du -b $file | awk ' {print $1}'`

    if [[ $size > 0 ]]
    then
	echo "0"
    else
	echo "1"
    fi
    unlink $file
}
    
usage()
{
    echo "Usage: $basename [-i <string>] [-a <list|delist>] [-f FILE_NAME]" 1>&2; exit 1;
}

block_ip_v4()
{
    if [ -z "$1" ]
    then
        exit 1
    fi
    
    
    if valid_ip_v4 $1;
    then
	stat="good"
    else
	stat="bad"
    fi
    if [[ $stat = "bad" ]]
    then
	printf "$IP_V4_NOT_VALID"
	log "$1" "problem"
	exit 1
    fi
    
    str=`ip route | grep $1 | tr -d "blackhole"`
    strlength=`echo -n $str | wc -c`

    if [ $str = "$1" 2>/dev/null ]
    then
	printf "$IP_V4_ALREADY_BLOCKED"
	exit 1
    fi
    ip route add blackhole $1

    str=`ip route | grep "$1" | tr -d "blackhole"`
    strlength=`echo -n $str | wc -c`
    if [ $strlength > 0 ] && [ $str = "$1" ];
    then
	printf "$IP_V4_BLOCKED" "$1"
	log "$1" "list"
	exit 0
    else
	    printf "$IP_V4_PROBLEM" "$1"
    fi
}


block_ip_v6()
{
    if [ -z "$1" ]
    then
	exit 1
    fi
    if [[ $(valid_ip_v6 $1) = "1" ]]
    then
	ip -6 route add blackhole $1
	str=`ip -6 route | grep "$1" | tr -d "blackhole"`
	strlength=`echo -n $str | wc -c`
	if [[ $strlength > 0 ]];
	then
	    printf "$IP_V4_BLOCKED" "$1"
	    exit 0
	else
	    printf "$IP_V4_PROBLEM" "$1"
	fi
    else
	    printf "$IP_V4_NOT_IP"
    fi
}

unblock_ip_v4()
{
    if [ -z "$1" ]
    then
	exit 1
    fi
    
    str=`ip route | grep $1`
    strlength=`echo -n $str | wc -c`
    
    if [ $strlength = 0 ]
    then
	printf "$IP_NOT_LISTED" "$1"
	exit 0
    else
	ip route del blackhole $1
	str=`ip route | grep $1`
	strlength=`echo -n $str | wc -c`
	if [ $strlength = "0" ]
	then
	    printf "$IP_DELISTED" "$1"
	    log $1 delist
	    exit 0
	else
	    printf "$IP_DELISTING_ERROR" "$1"
	fi
    fi
    
}


block_from_file()
{

    if [ ! -f "$1" ]
    then
	echo "File $1 does not exist"
	exit 1
    else
	input="$1"
	for ip in `cat $input`
	    do
		if [[ $ACTION = "block" ]]
		then
		    if valid_ip_v4 $ip;
		    then
			ip route add blackhole $ip 2>/dev/null
			str=`ip route | grep $ip | tr -d "blackhole"`
			strlength=`echo -n $str | wc -c`
			    if [ "$str"="$ip" ]
			    then
				print "$IP_FILE_BLOCKED" "$1" "$input"
				log $ip "block" $input
			    else
				printf "$IP_FILE_BLOCKING_PROBLEM" "$1" "$input"
				log $ip "problem"
			    fi
		    else
			    printf "$IP_V4_NOT_IP" "$1"
	        fi
		    
	    elif [[ $ACTION = "unblock" ]]
	    then
		if valid_ip_v4 $ip;
		then
		    ip route del blackhole "$ip"
		    str=`ip route | grep $ip | tr -d "blackhole"`
		    strlength=`echo -n $str | wc -c`
		    if [[ $strlength = 0 ]]
		    then
		        printf "$IP_FILE_UNBLOCKED" "$1" "$input"
			log $ip "unblock" $input
		    else
		        printf "$IP_FILE_UNBLOCKING_PROBLEM" "$1" "$input"
			log $ip "problem"
		    fi
		else
			printf "$IP_V4_NOT_IP" "$1"
		fi
	    fi
	done
    fi
}

unblock_ip_v6()
{
    if [ -z "$1" ]
    then
	exit 1
    fi
    
    
    str=`ip -6 route | grep $1`
    strlength=`echo -n $str | wc -c`
    
    if [ $strlength = "0" ]
    then
	printf "$IP_NOT_LISTED" "$1"
	exit 0
    else
	ip -6 route del blackhole $1
	str=`ip route | grep $1`
	strlength=`echo -n $str | wc -c`
	if [ $strlength = "0" ]
	then
	    printf "$IP_DELISTED" "$1"
	    log $1 "delist"
	    exit 0
	else
	    printf "$IP_DELISTING_ERROR" "$1"
	    log $1 "problem"
	fi
    fi
}
    
count()
{
    echo "IPv4 blocked: " `ip route | wc -l`
    echo "IPv6 blocked: " `ip -6 route | wc -l`
    return 0
}

if [ $# = $NO_ARGS ]
then
    usage
fi



while getopts "i:a:dcf:vh" arg; do
    case $arg in
	i)	IP=${OPTARG}
		;;

	a)	ACTION=${OPTARG}
		;;

	d)	IPVERSION=${OPTARG}
	    if [[ $IPVERSION != 4 && $IPVERSION != 6 ]]
	    then
		    usage
	    fi
	    ;;
	    
	c)	count
	    exit 0
	    ;;

	f)  file_operation=1
	    block_from_file ${OPTARG}
	    exit 0
	    ;;
	    
	v)	echo "IP blocking script; version 0.21"
	    exit 0
	    ;;
	    
	h)	help
	    ;;
	    
	*)	usage
	    ;;
    esac
done


if [[ $ACTION != "list" && $ACTION != "delist" ]]
then
	usage
fi

if [[ -z $IPVERSION ]]
then
    IP_VERSION=4
else
    IP_VERSION=$IPVERSION
fi

case $ACTION in
    list)
	if [[ $IP_VERSION = 4 ]]
	then
	    block_ip_v4 $IP
	    exit 0
	else
	    block_ip_v6 $IP
	    exit 0
	fi
	exit 0
	;;
	
    delist)	if [[ $IP_VERSION = 4 ]]
	then
	    unblock_ip_v4 $IP
	else
	    unblock_ip_v6 $IP
	fi
	exit 0
	;;
	
    count)	count
	;;
	
    block)	block="1"
	;;
    
    unblock)	block="0"
	;;
	
    *)	usage
	exit 1
esac